-------------------------------------------------------
--------- Server Provisioning Using Terraform ---------

1. install git (to be abel to publish/upload on github) i'm usign ubuntu on the machine so use the ubuntu process from this artical "https://www.atlassian.com/git/tutorials/install-git"
2. install terraform (https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli)
3. create the server terraform files 
4. install AWS CLI (to rejester the AccessKey or enter it maniual ~/.aws/credintials)
5. create and rejester the AWS AccessKey (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#Using_CreateAccessKey)

6. create and install the  SSH Key Pair and install from the AWS console (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/create-key-pairs.html)

    - note that you need to change the permissions of the file (chmod 400)
- note: you will use nginx on the cerver s oin the aws_security_group enable port 80  
- note: you will use sonarQube so avoid using (t2.micro) machines.
    - SonarQube server requires at least 2GB of RAM to run efficiently and 1GB of free RAM for the OS. 

-------------------------------------------------------
---------- Server Configuration Management. -----------

1. Install Ansible

2. create the playbooks of (Nginx, Apache, docker)

3. create the ansible.cfg file (to hold the configuration)

4. create the invintory.ini to hold the hosts data 


note: you are trying to install nginx and apache on the same device (both use port 80 ) so forward one of them to anothr port say "5000"

5. run the playbooks  

    - note: if you face a problem running the playbooks consider taking the following action :
        - Ensure Python and "six" Module are Installed:
            sudo apt-get update
            sudo apt-get install python3-pip
            pip3 install six

        - Ensure ansible module is installed or update it:
            pip install --upgrade ansible


----------------------------------------------------------
---------- Deployment Using Docker Containers. -----------

1. create docker compose file to start the SonarQube, PostgreSQL containers

2. create ansible playbook to run the docker compose on the server 


-----------------------------------------------------------------
---------- Port-Forwarding Configuration Using Nginx. -----------

1. create the reverse-proxy.configuration for nginx to forward the requests (/apache ==> port 5000),  (/sonarqube ==> port 9000)

2. create ansible playbook to apply the configuration on teh server 

3. you will need to appply modifications to SonarQube "pproperties" so we write a playbook to run the configuration 
    (sonar\.web\.context, sonar\.web\.port)
